/* module FullAdder (A, B, Ci, S, Co);

input A, B, Ci;
output S, Co;

assign S = A ^ B ^ Ci;
assign Co =(A & B) | (A ^ B) & Ci;


specify
    (A, B, Ci => Co) = (500, 781);
    (A, B, Ci => So) = (245, 237);
endspecify

endmodule
 */


 /* module fullAdder_tb; 


 // Inputs

logic A;

logic B;

logic Ci;


 // Outputs

logic S;

logic Co;

 

 //Temporary looping variable

 logic [2:0] i = 3'd0;

 

 // Instantiate the Unit Under Test (UUT)

 fullAdder uut (

  .A(A), 

  .B(B), 

  .Ci(Ci), 

  .S(S), 

  .Co(Co)

  );

 initial begin

  // Initialize Inputs

  A = 1'b0;

  B = 1'b0;

  Ci = 1'b0;


  #100; // Wait 100 ns for global reset to finish

  // Add stimulus here

  for = 0; i < 8; i = i + 1'b1)begin

   {A,B,Ci} = {A,B,Ci} + 1'b1;

   #20;

  end

 end      

endmodule */






module my_FSM (input clk, input w, input reset, output out = 0);
    enum {A, B, C, D, E} currentState = A, nextState = A;

    always_comb begin
        case (currentState)
        A: if (w==1) nextState = B;
        B: if (w==1) nextState = C;
        C: if (w==1) nextState = D;
        D: if (w==1) nextState = E;
        E: if (w==1) nextState = E;
        endcase
    end

    always_ff @(posedge clk) begin
        if (reset == 1) begin
            currentState = A;
            nextState = A;
        end

        if (w == 0) currentState = A;
        else currentState = nextState;
        
        if (currentState == E) out <= 1;
        else out = 0;
    end
endmodule



input logic reset;
output logic out;
logic [1:0] state, nextstate;
parameter S0 = 2 ’ b00 , S1 = 2 ’ b10 , S2 = 2 ’ b10 , S3 = 2 ’ b11 ;


always_ff @ (posedge clk)
    if (reset) state <= A;
    case(state)
        A:
            if (w==1) nextState = B;
            else nextstate = A;
        B:
            if (w==1) nextState = C;
            else nextstate = A;
        C:
            if (w==1) nextState = D;
            else nextstate = A;
        D:
            if (w==1) nextState = E;
            else nextstate = A;
        E:
            if (w==1) nextState = E;
            else nextstate = A;
    endcase


    module XOR(output O, input A, B);
    xor(Y,A,B);
endmodule

module AND(output O, input A, B);
    and(Y,A,B);
endmodule

module OR(output O, input A, B);
    or(Y,A,B);
endmodule

module fullAdder (input A, input B, input Ci, output S, output Co);
    logic O1, O2, O3;

    XOR xor1(O1, A, B);
    XOR xor2(S, O1, Ci);
    AND and1(O2, A, B);
    AND and2(O3, O1, Ci);
    OR or1(Co, O2, O3);

    specify
        (A, B, Ci => Co ) = (500, 781);
        (A, B, Ci => So ) = (245, 237);
    endspecify
endmodule


module my_FSM (input reset, input clk, input w, output out = 0);
    enum {A, B, C, D, E} state = A, nextState = A;

    always_comb begin
        case (state)
        A: if (w==1) nextState = B;
        B: if (w==1) nextState = C;
        C: if (w==1) nextState = D;
        D: if (w==1) nextState = E;
        E: if (w==1) nextState = E;
        endcase
    end

    always_ff @(posedge clk) begin
        if (reset == 1) begin
            currentState = A;
            nextState = A;
        end

        if (w == 0) currentState = A;
        else currentState = nextState;
        
        if (currentState == E) out <= 1;
        else out = 0;
    end
endmodule